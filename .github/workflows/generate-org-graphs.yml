name: Generate Commit Graphs for Repos I Pushed To

on:
  schedule:
    - cron: '0 0 */2 * *' # Every 48 hours at midnight UTC
  workflow_dispatch: # Manual trigger

jobs:
  generate-graphs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout .github repo
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Get user repos and orgs
        id: fetch-data
        run: |
          # Fetch personal repos
          curl -H "Authorization: token ${{ secrets.PAT }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/user/repos?per_page=100" > personal_repos.json

          # Fetch organizations
          curl -H "Authorization: token ${{ secrets.PAT }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/user/orgs" > orgs.json || echo "[]"

          # Extract org names (empty string if none)
          echo "ORGS=$(jq -r '.[].login' orgs.json || echo '')" >> $GITHUB_ENV

      - name: Get repos from orgs
        run: |
          mkdir -p repo_data
          echo "Fetching org repos..."
          if [ -n "${{ env.ORGS }}" ]; then
            for org in ${{ env.ORGS }}; do
              curl -H "Authorization: token ${{ secrets.PAT }}" \
                   -H "Accept: application/vnd.github.v3+json" \
                   "https://api.github.com/orgs/$org/repos?per_page=100" > "repo_data/$org.json" || echo "[]"
            done
            jq -s '[.[][], .[][]]' personal_repos.json repo_data/*.json > all_repos.json
          else
            echo "No orgs found, using only personal repos."
            cp personal_repos.json all_repos.json
          fi

          # Get all repo URLs
          echo "REPOS=$(jq -r '.[].clone_url' all_repos.json)" >> $GITHUB_ENV

      - name: Check for recent pushes and generate graphs
        run: |
          mkdir -p graphs
          since=$(date -u -Iseconds -d "48 hours ago")
          counter=1
          for repo in ${{ env.REPOS }}; do
            repo_name=$(basename "$repo" .git)
            owner=$(echo "$repo" | sed 's|https://github.com/||' | cut -d'/' -f1)
            echo "Checking $repo_name for recent pushes..."
            commit_check=$(curl -s -H "Authorization: token ${{ secrets.PAT }}" \
                                -H "Accept: application/vnd.github.v3+json" \
                                "https://api.github.com/repos/$owner/$repo_name/commits?author=${{ github.actor }}&since=$since&per_page=1")
            if echo "$commit_check" | grep -q '"sha"'; then
              echo "Recent push detected in $repo_name, generating graph..."
              if git clone "$repo" "temp-$repo_name" 2>/dev/null; then
                cd "temp-$repo_name"
                git log --graph --pretty=format:'%h' --no-decorate > "../graphs/graph-$counter.txt"
                cd ..
                rm -rf "temp-$repo_name"
                counter=$((counter + 1))
              else
                echo "Skipping $repo_name (no clone access)"
              fi
            else
              echo "No recent pushes by ${{ github.actor }} in $repo_name, skipping..."
            fi
          done

      - name: Upload graphs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: commit-graphs
          path: graphs/*.txt

      - name: Commit graphs to repo
        if: always()
        run: |
          if ls graphs/*.txt >/dev/null 2>&1; then
            git add graphs/*.txt
            git commit -m "Update commit graphs for recent pushes"
            git push
          else
            echo "No graphs generated, nothing to commit."
          fi